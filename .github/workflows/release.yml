# Production Release Workflow
# 
# This workflow handles production releases for the Digital Samba Embedded API MCP Server
# It triggers on version tags (e.g., v0.0.1 or 0.0.1) and performs:
# - Full test suite across multiple Node versions
# - Security audit
# - Build verification
# - NPM publishing
# - GitHub release creation with changelog
#
# Required secrets:
# - NPM_TOKEN: NPM automation token for publishing
#
# Status badges:
# - Release: ![Release](https://github.com/digitalsamba/embedded-api-mcp-server/workflows/Release/badge.svg)
# - NPM Version: ![npm version](https://img.shields.io/npm/v/@digitalsamba/embedded-api-mcp-server.svg)
# - NPM Downloads: ![npm downloads](https://img.shields.io/npm/dm/@digitalsamba/embedded-api-mcp-server.svg)

name: Release

on:
  push:
    tags:
      # Matches tags like v0.0.1, v1.2.3, 0.0.1, 1.2.3
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+'

# Cancel any in-progress runs for the same tag
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Verify the tag is on the main branch
  verify-branch:
    name: Verify Release Branch
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if tag is on main branch
        id: check
        run: |
          # Get the commit SHA of the tag
          TAG_COMMIT=$(git rev-list -n 1 ${{ github.ref_name }})
          
          # Check if this commit exists on main branch
          if git merge-base --is-ancestor $TAG_COMMIT origin/main; then
            echo "Tag is on main branch, proceeding with release"
            echo "should-release=true" >> $GITHUB_OUTPUT
          else
            echo "Tag is not on main branch, skipping release"
            echo "should-release=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  # Run full test suite across Node versions
  test:
    name: Test (Node ${{ matrix.node-version }})
    needs: verify-branch
    if: needs.verify-branch.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 21]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint --if-present

      - name: Run tests with coverage
        run: npm run test:ci

      - name: Upload coverage to Codecov
        if: matrix.node-version == 20
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Security audit
  security:
    name: Security Audit
    needs: verify-branch
    if: needs.verify-branch.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --production
        continue-on-error: true

      - name: Check for critical vulnerabilities
        run: |
          # Check for critical and high severity vulnerabilities
          AUDIT_OUTPUT=$(npm audit --json --production)
          CRITICAL=$(echo "$AUDIT_OUTPUT" | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(echo "$AUDIT_OUTPUT" | jq '.metadata.vulnerabilities.high // 0')
          
          if [ "$CRITICAL" -gt 0 ]; then
            echo "❌ Found $CRITICAL critical vulnerabilities"
            exit 1
          elif [ "$HIGH" -gt 0 ]; then
            echo "⚠️ Found $HIGH high severity vulnerabilities"
            # Warning only, don't fail the build
          else
            echo "✅ No critical or high severity vulnerabilities found"
          fi

  # Build verification
  build:
    name: Build Verification
    needs: [verify-branch, test, security]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Verify build output
        run: |
          # Check that dist directory exists and contains expected files
          if [ ! -d "dist" ]; then
            echo "❌ Build failed: dist directory not found"
            exit 1
          fi
          
          if [ ! -f "dist/index.js" ]; then
            echo "❌ Build failed: dist/index.js not found"
            exit 1
          fi
          
          # Check build size
          npm run build:size-check --if-present || true
          
          echo "✅ Build verification passed"

      - name: Test package installation
        run: |
          # Create a test directory
          mkdir -p /tmp/test-install
          cd /tmp/test-install
          
          # Pack the current package
          PACKAGE_PATH=$(npm pack ${{ github.workspace }})
          
          # Try to install it
          npm init -y
          npm install $PACKAGE_PATH
          
          # Verify it's installed
          npm ls @digitalsamba/embedded-api-mcp-server
          
          echo "✅ Package installation test passed"

  # Publish to NPM and create GitHub release
  release:
    name: Publish Release
    needs: [verify-branch, test, security, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Extract version from tag
        id: version
        run: |
          # Remove 'v' prefix if present
          VERSION=${GITHUB_REF_NAME#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Verify package.json version matches tag
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if [ "$VERSION" != "$PACKAGE_VERSION" ]; then
            echo "❌ Tag version ($VERSION) does not match package.json version ($PACKAGE_VERSION)"
            exit 1
          fi
          echo "✅ Version verified: $VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "This is the first release"
            CHANGELOG="Initial release of Digital Samba MCP Server"
          else
            echo "Generating changelog from $PREVIOUS_TAG to ${{ github.ref_name }}"
            
            # Generate changelog
            CHANGELOG=$(git log $PREVIOUS_TAG..${{ github.ref_name }} --pretty=format:"- %s (%h)" --no-merges)
            
            # Count changes by type
            FEATURES=$(git log $PREVIOUS_TAG..${{ github.ref_name }} --pretty=format:"%s" --no-merges | grep -c "^feat" || true)
            FIXES=$(git log $PREVIOUS_TAG..${{ github.ref_name }} --pretty=format:"%s" --no-merges | grep -c "^fix" || true)
            TOTAL=$(git log $PREVIOUS_TAG..${{ github.ref_name }} --pretty=format:"%s" --no-merges | wc -l)
            
            # Create summary
            SUMMARY="## Summary\n\n"
            SUMMARY+="- Total commits: $TOTAL\n"
            [ $FEATURES -gt 0 ] && SUMMARY+="- New features: $FEATURES\n"
            [ $FIXES -gt 0 ] && SUMMARY+="- Bug fixes: $FIXES\n"
            
            CHANGELOG="$SUMMARY\n## Changes\n\n$CHANGELOG"
          fi
          
          # Save to file for GitHub release
          echo -e "$CHANGELOG" > RELEASE_NOTES.md
          echo "Generated release notes saved to RELEASE_NOTES.md"

      - name: Publish to NPM
        run: |
          # Set npm config
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          
          # Publish with public access
          npm publish --access public
          
          echo "✅ Published version ${{ steps.version.outputs.version }} to NPM"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify success
        run: |
          echo "🎉 Release ${{ steps.version.outputs.version }} completed successfully!"
          echo ""
          echo "📦 NPM: https://www.npmjs.com/package/@digitalsamba/embedded-api-mcp-server/v/${{ steps.version.outputs.version }}"
          echo "🏷️ GitHub: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
          echo ""
          echo "To install: npm install @digitalsamba/embedded-api-mcp-server@${{ steps.version.outputs.version }}"

  # Cleanup job on failure
  cleanup:
    name: Cleanup on Failure
    needs: [verify-branch, test, security, build, release]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Report failure
        run: |
          echo "❌ Release workflow failed for tag ${{ github.ref_name }}"
          echo "Please check the workflow logs for details."
          exit 1